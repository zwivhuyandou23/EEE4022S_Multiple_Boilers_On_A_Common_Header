function qelmtlistbox(UIOperation)
% QELMTLISTBOX Set up element popup for editing. (Utility Function)
%          QELMTLISTBOX sets up the popup menu for the various elements allowed
%          within the IDEs selected in the listbox.

% Author: Craig Borghesani
% 8/31/93
% Copyright (c) 2003, Terasoft, Inc.
%       $Revision: 1.5 $

grey = get(0,'defaultuicontrolbackground');
ltgrey = [0.5,0.5,0.5]*1.5;
dkgrey = [0.5,0.5,0.5]*0.5;

f=gcf;
bthan=get(f,'userdata');
if strcmp(get(bthan(1),'type'),'figure'),
   f = bthan;
   bthan = get(f,'userdata');
end
infmat=get(bthan(16),'userdata');
hint_bar = get(bthan(36),'userdata');
T=get(bthan(13),'userdata');
QFTToolData = getappdata(f,'QFTToolData');
ElementsListbox = QFTToolData.Elements(17);
DeleteButton = QFTToolData.Elements(18);
ReduceButton = QFTToolData.Elements(19);
ConvertButton = QFTToolData.Elements(20);
DiscreteItem = bthan(end-1);
cont=get(bthan(19),'userdata');
lomat=get(bthan(20),'userdata');
if isempty(cont),
   cont = get(bthan(3),'userdata');
   lomat=get(bthan(1),'userdata');
end

% turn off mouse editing
if strcmp(UIOperation, 'Edit'),
   if infmat(9,1)==3,
      set(infmat(6,1:2),'vis','off','userdata',[]);
   else
      set(infmat(6,1),'vis','off','userdata',[]);
   end

   set(bthan(31),'userdata',{[], []});

% reseting button-state functions
   set(f,'windowbuttonupfcn','');
   if length(get(f,'windowbuttonmotionfcn'))>1,
      set(f,'windowbuttonmotionfcn','qmouse(''Floating'')');
   end

% reset complex and frequency values
   infmat(4,3)=0;
   infmat(3,3)=0;
   set(bthan(16),'userdata',infmat);
end

ListboxString = get(ElementsListbox,'string');
ListboxValue = get(ElementsListbox,'value');
ListboxInfo = get(ElementsListbox,'userdata');
ElementEnvironment = infmat(9,1);

if length(ListboxValue) == 1,
   ElementLocation = ListboxInfo(ListboxValue);
   ElementType = cont(ElementLocation, 4);
   if strcmp(UIOperation,'Edit'),
      EditCallback = sprintf('qelmts(%d,%d,''Edit'')', ElementType, ElementLocation);
   else
      EditCallback = '';
   end
   AddCallback = sprintf('qelmts(%d,0,''Add'')', ElementType);
   SliderCallback = sprintf('qelmts(%d,%d,''Iterate'')', ElementType, ElementLocation);

   set(hint_bar,'string','Enter values into the appropriate edit boxes');
   set(infmat(16,1:3),'string','','enable','off', 'back', ltgrey, 'callback','');
   set(infmat(17,1:3),'enable','off','callback','');
   set(infmat(19,1:3),'string','');
   if strcmp(UIOperation,'Add'),
      set(infmat(13,1),'callback',AddCallback,'enable','on');
   else
      set(infmat(13,1),'enable','off');
   end
   if (strcmp(UIOperation,'Edit') | strcmp(UIOperation, 'Iterate')) & isempty(get(bthan(19),'userdata')),
      set(infmat(13,2:4),'enable','off');
   else
      set(infmat(13,2:3),'enable','on');
   end
   set(DeleteButton,'enable','on');
   set([ReduceButton, ConvertButton],'enable','off');

   if ElementType==0,
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(19,1),'string','k');
      gain_val = cont(ElementLocation,1);
      set(infmat(17,1),'callback',SliderCallback,...
                       'value',gain_val,'enable','on');
      if gain_val > 0,
         set(infmat(17,1),'min',10^((20*log10(gain_val)-5)/20),...
                          'max',10^((20*log10(gain_val)+5)/20));
      else
         set(infmat(17,1),'min',-10^((20*log10(-gain_val)+5)/20),...
                          'max',-10^((20*log10(-gain_val)-5)/20));

      end;%if
      set(infmat(16,4),'value',ElementType+1);
      set(infmat(13,1),'enable','off');
      if any(diff(lomat(2,:))),
         set(infmat(13,4),'callback','qscrelmt(1)','enable','on');
      end
      set(DeleteButton,'enable','off');

   elseif any(ElementType==[0.5, 0.7]),
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2);
      set(infmat(17,1),'callback',SliderCallback,...
                       'value',val,...
                       'min',0,...
                       'max',100,...
                       'sliderstep',[1/100, 10/100],...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'value',val2,...
                       'min',0,...
                       'max',100,...
                       'sliderstep',[1/100, 10/100],...
                       'enable','on');

      if T == 0,
         set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                          'enable','on',...
                          'callback',EditCallback,...
                          'back', 'w');
         set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                          'enable','on',...
                          'callback',EditCallback,...
                          'back', 'w');
         set(infmat(19,1),'string','Integ');
         set(infmat(19,2),'string','Diff');

      else
         set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                          'enable','on',...
                          'callback',EditCallback,...
                          'back', 'w');
         set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                          'enable','on',...
                          'callback',EditCallback,...
                          'back', 'w');
         set(infmat(19,1),'string','Integ');
         set(infmat(19,2),'string','Diff');

      end
      set(infmat(13,1),'enable','off');
      if infmat(9,1)==1,
         set(infmat(16,4),'value',10);
      else
         set(infmat(16,4),'value',7);
      end

   elseif ElementType == 0.6,
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2);
      set(infmat(17,1),'callback',SliderCallback,...
                       'value',val,...
                       'min',0,...
                       'max',3,...
                       'sliderstep',[1/3, 10/3],...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'value',val2,...
                       'min',0,...
                       'max',3,...
                       'sliderstep',[1/3, 10/3],...
                       'enable','on');
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                        'enable','on',...
                        'callback',EditCallback,...
                        'back', 'w');
      set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                        'enable','on',...
                        'callback',EditCallback,...
                        'back', 'w');
      set(infmat(19,1),'string','Delay');
      set(infmat(19,2),'string','Pred');
      set(infmat(13,1),'enable','off');
      if infmat(9,1)==1,
         set(infmat(16,4),'value',11);
      else
         set(infmat(16,4),'value',8);
      end

   elseif any(ElementType==[1 2]),
      str = ['pole'; 'zero'];
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(19,1),'string',str(ElementType,:));
      set(infmat(16,4),'value',ElementType+1);
      if cont(ElementLocation,1) > 0,
         set(infmat(17,1),'callback',SliderCallback,...
                          'min',real(cont(ElementLocation,1))*0.5,...
                          'max',real(cont(ElementLocation,1))*1.5,...
                          'value',real(cont(ElementLocation,1)),...
                          'enable','on');
      else
         set(infmat(17,1),'callback',SliderCallback,...
                          'min',real(cont(ElementLocation,1))*1.5,...
                          'max',real(cont(ElementLocation,1))*0.5,...
                          'value',real(cont(ElementLocation,1)),...
                          'enable','on');
      end
      set(infmat(16,4),'value',ElementType+1);
      set(infmat(13,4),'callback','qscrelmt(2)','enable','on');

   elseif any(ElementType==[3 4]),
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(19,1),'string','zeta');
      set(infmat(19,2),'string','wn');
      set(infmat(16,4),'value',ElementType+1);
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2);
      set(infmat(17,1),'callback',SliderCallback,...
                       'min',val*0.5,...
                       'max',val*1.5,...
                       'value',val,...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'min',val2*0.5,...
                       'max',val2*1.5,...
                       'value',val2,...
                       'enable','on');
      set(infmat(13,4),'callback','qscrelmt(3)','enable','on');

   elseif ElementType==5,
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),'enable','on','callback',EditCallback, 'back', 'w');
      set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),'enable','on','callback',EditCallback, 'back', 'w');
      set(infmat(19,1),'string','phase');
      set(infmat(19,2),'string','w');
      set(infmat(16,4),'value',ElementType+1);
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2);
      set(infmat(17,1),'callback',SliderCallback,...
                       'min',-87,...
                       'max',87,...
                       'value',val,...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'min',val2*0.5,...
                       'max',val2*1.5,...
                       'value',val2,...
                       'enable','on');

      if ElementEnvironment == 1,
         set(infmat(13,4),'callback','qscrelmt(4)','enable','on');
      end

   elseif ElementType==6,
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(16,3),'string',num2str(cont(ElementLocation,3)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(19,1),'string','zeta1(zero)');
      set(infmat(19,2),'string','zeta2(pole)');
      set(infmat(19,3),'string','wn');
      set(infmat(16,4),'value',ElementType+1);
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2); val3=cont(ElementLocation,3);
      set(infmat(17,1),'callback',SliderCallback,...
                       'min',val*0.5,...
                       'max',val*1.5,...
                       'value',val,...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'min',val2*0.5,...
                       'max',val2*1.5,...
                       'value',val2,...
                       'enable','on');
      set(infmat(17,3),'callback',SliderCallback,...
                       'min',val3*0.5,...
                       'max',val3*1.5,...
                       'value',val3,...
                       'enable','on');
      set(infmat(13,4),'callback','qscrelmt(5)','enable','on');

   elseif ElementType==7,
      set(infmat(16,1),'string',num2str(cont(ElementLocation,1)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(16,2),'string',num2str(cont(ElementLocation,2)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(16,3),'string',num2str(cont(ElementLocation,3)),...
                       'enable','on',...
                       'callback',EditCallback,...
                       'back', 'w');
      set(infmat(19,1),'string','phase');
      set(infmat(19,2),'string','mag');
      set(infmat(19,3),'string','w');
      set(infmat(16,4),'value',ElementType+2);
      val=cont(ElementLocation,1); val2=cont(ElementLocation,2); val3=cont(ElementLocation,3);
      set(infmat(17,1),'callback',SliderCallback,...
                       'min',-177,...
                       'max',177,...
                       'value',val,...
                       'enable','on');
      set(infmat(17,2),'callback',SliderCallback,...
                       'min',val2*0.5,...
                       'max',val2*1.5,...
                       'value',val2,...
                       'enable','on');
      set(infmat(17,3),'callback',SliderCallback,...
                       'min',val3*0.5,...
                       'max',val3*1.5,...
                       'value',val3,...
                       'enable','on');
      set(infmat(13,4),'callback','qscrelmt(7)','enable','on');

   end % if ElementType==0

else

% determine what we can do (delete, reduce, convert)
   set(infmat(16,1:3),'string','','enable','off', 'back', ltgrey, 'callback','');
   set(infmat(17,1:3),'enable','off','callback','');
   set(infmat(19,1:3),'string','');

% cycle through all selected elements
   SelectedElements = cont(ListboxInfo(ListboxValue),4);

   DeleteReduceElements = [7, 6 5 4 3 2 1 0.7 0.5 0.6];
   ConvertElements = [1,2];

% turn off buttons if gain is selected

% determine if conversion can be done
   AllPoles = find(SelectedElements == 1);
   AllZeros = find(SelectedElements == 2);
   AllComplexPoles = find(SelectedElements == 3);
   AllComplexZeros = find(SelectedElements == 4);
   Others = find(SelectedElements ~= 1 & SelectedElements ~= 2);

   if any(SelectedElements == 0),
      set([DeleteButton, ConvertButton, ReduceButton, DiscreteItem], 'enable', 'off');

   else
      set(DeleteButton, 'enable', 'on');

      if (length(AllZeros) + length(AllComplexZeros)*2) > (length(AllPoles) + length(AllComplexPoles)*2),
         set([ReduceButton, DiscreteItem],'enable','off');

      else
         set([ReduceButton, DiscreteItem], 'enable','on');
      end
   end

end
